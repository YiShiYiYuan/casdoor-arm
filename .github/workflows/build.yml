# https://github.com/casdoor/casdoor.git
# https://api.github.com/repos/casdoor/casdoor/releases

name: Build

on:
  # push:
  
  schedule:
    - cron:  '13 22 * * *'
    
  issue_comment:
    types: [created, edited, deleted]

  workflow_dispatch:

jobs:
  release-and-push:
    name: Release And Push
    runs-on: ubuntu-latest
    steps:
      - name: Fetch last release
        id: fetch_release
        run: |
          last_release="$(curl -sSL https://api.github.com/repos/casdoor/casdoor/releases | jq -r '.[0] | {tag_name, published_at, tarball_url, body}')"
          tag_name="$(echo ${last_release} | jq -r '.tag_name')"
          tarball="$(echo ${last_release} | jq -r '.tarball_url')"
          releasenote="$(echo ${last_release} | jq -r '.body')"
          echo "tag_name=${tag_name}" >> $GITHUB_ENV
          echo "tarball=${tarball}" >> $GITHUB_ENV
          echo "releasenote=`echo ${releasenote}`" >> $GITHUB_ENV

      - name: Fetch Previous version
        id: get-previous-tag
        run: |
          tag="$(curl 'https://hub.docker.com/v2/repositories/wbchn/casdoor-arm64/tags?page_size=10' | jq -r '.results[].name' | grep -v 'latest' | head -n1)"
          echo "previous_tag=${tag}" >> $GITHUB_ENV

      - name: Decide Should_Push Or Not
        id: should_push
        run: |
          old_version=$previous_tag
          new_version=$tag_name

          old_array=(${old_version//\./ })
          new_array=(${new_version//\./ })

          if [ ${old_array[0]} != ${new_array[0]} ] || [ ${old_array[1]} != ${new_array[1]} ]
          then 
              echo "should_push=true" >> $GITHUB_ENV
          else
              echo "should_push=false" >> $GITHUB_ENV
          fi

      - name: Checkout
        if: env.should_push == 'true'
        uses: actions/checkout@v4
        with:
          repository: casdoor/casdoor
          fetch-depth: -1  # casdoor build need read version from git info.
          ref: refs/tags/${{ env.tag_name }}

      - name: Change arm64
        if: env.should_push == 'true'
        id: set_arm64
        run: |
          sed -i 's|GOARCH=amd64|GOARCH=arm64|g' build.sh

      - name: Set up QEMU
        if: env.should_push == 'true'
        uses: docker/setup-qemu-action@v3

      - name: Set up buildx
        id: buildx
        if: env.should_push == 'true'
        uses: docker/setup-buildx-action@v3
        with:
          version: latest

      - name: Log in to Docker Hub
        if: env.should_push == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Login to GitHub Container Registry
        if: env.should_push == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push to Docker Hub
        if: env.should_push == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          target: STANDARD
          platforms: linux/arm64
          push: true
          tags: "wbchn/casdoor-arm64:${{ env.tag_name }},\
wbchn/casdoor-arm64:latest,\
ghcr.io/yishiyiyuan/casdoor-arm64:${{ env.tag_name }},\
ghcr.io/yishiyiyuan/casdoor-arm64:latest"

      # - name: Create tag
      #   if: env.should_push == 'true'
      #   uses: actions/github-script@v7
      #   with:
      #     script: |
      #       github.rest.git.createRef({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         ref: "refs/tags/${{ env.tag_name }}",
      #         sha: context.sha
      #       })

      - name: Create Release
        id: create_release
        if: env.should_push == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.tag_name }}
          release_name: Release ${{ env.tag_name }}
          body: |
            ${{ env.releasenote }}
            
            Download code from [here](${{ env.tarball }})
          draft: false
          prerelease: false
